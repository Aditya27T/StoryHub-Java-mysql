/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package storyhub.View.AdminContent;

import User.Dao.UserController;
import User.Model.User;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import java.awt.Color;
import storyhub.utils.Bcrypt;
import javax.swing.JTable;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;


/**
 *
 * author Administrator
 */
public class UserAdminPanel extends javax.swing.JPanel {

    /**
     * Creates new form UserAdminPanel
     */
    public UserAdminPanel() {
        initComponents();
        loadData();
        scrollTableToBottom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        rSMetroTextPlaceHolder1 = new rojerusan.RSMetroTextPlaceHolder();
        rSMaterialButtonCircle1 = new rojerusan.RSMaterialButtonCircle();

        setBackground(new java.awt.Color(102, 102, 255));
        loadData();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "id", "Username", "Password", "Email", "Role", "timestamp", "edit", "delete", "show"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jTable1.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public void setValue(Object value) {
                if (value instanceof String) {
                    String str = (String) value;
                    if (str.equals("Delete")) {
                        setBackground(Color.RED);
                        setForeground(Color.WHITE);
                    } else if (str.equals("Edit")) {
                        setBackground(Color.BLUE);
                        setForeground(Color.WHITE);
                    } else if (str.equals("Show")) {
                        setBackground(Color.GREEN);
                        setForeground(Color.WHITE);
                    } else {
                        setBackground(Color.WHITE);
                        setForeground(Color.BLACK);
                    }
                    setText((value == null) ? "" : value.toString());
                }
            }
        });
        
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int column = jTable1.getColumnModel().getColumnIndexAtX(evt.getX());
                int row = evt.getY() / jTable1.getRowHeight();
                if (row < jTable1.getRowCount() && row >= 0 && column < jTable1.getColumnCount() && column >= 0) {
                    Object value = jTable1.getValueAt(row, column);
                    if (value instanceof String) {
                        String str = (String) value;
                        if (str.equals("Edit")) {
                            int id = (int) jTable1.getValueAt(row, 0);
                            String username = (String) jTable1.getValueAt(row, 1);
                            String password = (String) jTable1.getValueAt(row, 2);
                            String email = (String) jTable1.getValueAt(row, 3);
                            String role = (String) jTable1.getValueAt(row, 4);
                            Timestamp timestamp = Timestamp.valueOf((String) jTable1.getValueAt(row, 5));
                            User user = new User.Builder()
                                    .setId(id)
                                    .setUsername(username)
                                    .setPassword(password)
                                    .setEmail(email)
                                    .setRole(role.equals("admin") ? 1 : 0)
                                    .setTimestamp(timestamp)
                                    .build();
                            editUser(user);
                        } else if (str.equals("Delete")) {
                            int id = (int) jTable1.getValueAt(row, 0);
                            String username = (String) jTable1.getValueAt(row, 1);
                            String password = (String) jTable1.getValueAt(row, 2);
                            String email = (String) jTable1.getValueAt(row, 3);
                            String role = (String) jTable1.getValueAt(row, 4);
                            Timestamp timestamp = Timestamp.valueOf((String) jTable1.getValueAt(row, 5));
                            User user = new User.Builder()
                                    .setId(id)
                                    .setUsername(username)
                                    .setPassword(password)
                                    .setEmail(email)
                                    .setRole(role.equals("admin") ? 1 : 0)
                                    .setTimestamp(timestamp)
                                    .build();
                            deleteUser(user);
                        } else if (str.equals("Show")) {
                            int id = (int) jTable1.getValueAt(row, 0);
                            ShowOneUser(id);
                        }
                    }
                }
            }
        });
        scrollTableToBottom();

        rSMetroTextPlaceHolder1.setText("Search");
        rSMetroTextPlaceHolder1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rSMetroTextPlaceHolder1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSMetroTextPlaceHolder1ActionPerformed(evt);
            }
        });

        rSMaterialButtonCircle1.setText("go");
        rSMaterialButtonCircle1.setFont(new java.awt.Font("Roboto Medium", 1, 12)); // NOI18N
        rSMaterialButtonCircle1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSMaterialButtonCircle1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 571, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rSMetroTextPlaceHolder1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rSMaterialButtonCircle1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rSMetroTextPlaceHolder1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rSMaterialButtonCircle1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rSMetroTextPlaceHolder1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSMetroTextPlaceHolder1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rSMetroTextPlaceHolder1ActionPerformed

    private void rSMaterialButtonCircle1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSMaterialButtonCircle1ActionPerformed
        // make search from textfield
        String search = rSMetroTextPlaceHolder1.getText();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // clear table data
        try {
            List<User> users = UserController.search(search);
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            for (User user : users) {
                String role = user.getRole() == 1 ? "admin" : "user";
                Timestamp timestamp = user.getTimestamp();
                String formattedTimestamp = sdf.format(timestamp);
                model.addRow(new Object[]{user.getId(), user.getUsername(), user.getPassword(), user.getEmail(), role, formattedTimestamp, "Edit", "Delete", "Show"});
            }
            // button enter to search
            jTable1.requestFocus();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_rSMaterialButtonCircle1ActionPerformed

    private void loadData() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // clear table data
        try {
            List<User> users = UserController.getAll();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            for (User user : users) {
                String role = user.getRole() == 1 ? "admin" : "user";
                Timestamp timestamp = user.getTimestamp();
                String formattedTimestamp = sdf.format(timestamp);
                model.addRow(new Object[]{user.getId(), user.getUsername(), user.getPassword(), user.getEmail(), role, formattedTimestamp, "Edit", "Delete", "Show"});
            }
            // key listener for scroll table 
            jTable1.addKeyListener(new KeyListener() {
                @Override
                public void keyTyped(KeyEvent e) {
                    // arrow right to scroll table to right
                    if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
                        scrollTableToBottom();
                    }
                }

                @Override
                public void keyReleased(KeyEvent e) {
                    // TODO Auto-generated method stub
                    if (e.getKeyCode() == KeyEvent.VK_DOWN) {
                        scrollTableToBottom();
                    }
                }

                @Override
                public void keyPressed(KeyEvent e) {
                    // TODO Auto-generated method stub
                    if (e.getKeyCode() == KeyEvent.VK_DOWN) {
                        scrollTableToBottom();
                    } else if (e.getKeyCode() == KeyEvent.VK_UP) {
                        scrollTableToBottom();
                    }
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void scrollTableToBottom() {
        JTable table = jTable1;
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        table.scrollRectToVisible(table.getCellRect(model.getRowCount() - 1, 0, true));
    }

    private void editUser(User user) {
        // edit using JoptionPane to input new values
        String username = JOptionPane.showInputDialog("Enter new username", user.getUsername());
        String email = JOptionPane.showInputDialog("Enter new email", user.getEmail());
        String password = JOptionPane.showInputDialog("Enter new password");
        int role = JOptionPane.showConfirmDialog(null, "Is this user an admin?", "Role", JOptionPane.YES_NO_OPTION);
        try {
            user = new User.Builder()
                    .setId(user.getId())
                    .setUsername(username)
                    .setEmail(email)
                    .setPassword(password == null ? user.getPassword() : Bcrypt.hashPassword(password))
                    .setRole(role == JOptionPane.YES_OPTION ? 1 : 0)
                    .build();
                    UserController.update(user);            
                    loadData();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void deleteUser(User user) {
        try {
            UserController.delete(user);
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.removeRow(jTable1.getSelectedRow());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void ShowOneUser(int id) {
        User user;
        String username = "";
        String email = "";
        String password = "";
        int role = 0;
        String roleString = "";
        Timestamp timestamp = null;
        try {
            user = UserController.getById(id);
            username = user.getUsername();
            email = user.getEmail();
            password = user.getPassword();
            role = user.getRole();
            if (role == 1) {
                roleString = "admin";
            } else {
                roleString = "user";
            }
            timestamp = user.getTimestamp();
            if (user != null) {
                JOptionPane.showMessageDialog(null, "id: " + id + "\nusername: " + username + "\nemail: " + email + "\npassword: " + password + "\nrole: " + roleString + "\ntimestamp: " + timestamp, "User", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "User does not exist", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private rojerusan.RSMaterialButtonCircle rSMaterialButtonCircle1;
    private rojerusan.RSMetroTextPlaceHolder rSMetroTextPlaceHolder1;
    // End of variables declaration//GEN-END:variables
}
